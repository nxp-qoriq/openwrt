From 395e3d5e3533323b8240a699963fd00292c381d5 Mon Sep 17 00:00:00 2001
From: Pankit Garg <pankit.garg@nxp.com>
Date: Thu, 9 Jul 2020 16:09:07 +0530
Subject: [PATCH 2/4] nxp/ls1046: Add support for ls1046adb board

Add plarform target to support ls1046adb board.
Add ddr raw timings for 2100MT/s, 64 bit data bus.

Signed-off-by: Pankit Garg <pankit.garg@nxp.com>
Signed-off-by: Priyanka Jain <priyanka.jain@nxp.com>
---
 plat/nxp/soc-ls1046/ls1046adb/ddr_init.c     | 176 +++++++++++++++
 plat/nxp/soc-ls1046/ls1046adb/platform.mk    |  16 ++
 plat/nxp/soc-ls1046/ls1046adb/platform_def.h | 212 +++++++++++++++++++
 plat/nxp/soc-ls1046/ls1046adb/policy.h       |  26 +++
 4 files changed, 430 insertions(+)
 create mode 100644 plat/nxp/soc-ls1046/ls1046adb/ddr_init.c
 create mode 100644 plat/nxp/soc-ls1046/ls1046adb/platform.mk
 create mode 100644 plat/nxp/soc-ls1046/ls1046adb/platform_def.h
 create mode 100644 plat/nxp/soc-ls1046/ls1046adb/policy.h

diff --git a/plat/nxp/soc-ls1046/ls1046adb/ddr_init.c b/plat/nxp/soc-ls1046/ls1046adb/ddr_init.c
new file mode 100644
index 000000000..b1f536d41
--- /dev/null
+++ b/plat/nxp/soc-ls1046/ls1046adb/ddr_init.c
@@ -0,0 +1,176 @@
+/*
+ * Copyright 2020 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ */
+
+#include <platform_def.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <stdbool.h>
+#include <debug.h>
+#include <errno.h>
+#include <string.h>
+#include <io.h>
+#include <ddr.h>
+#include <utils.h>
+#include <utils_def.h>
+#include <errata.h>
+
+#ifdef CONFIG_STATIC_DDR
+const struct ddr_cfg_regs static_1600 = {
+	.cs[0].config = 0x80010412,
+	.cs[0].bnds = 0x7F,
+	.sdram_cfg[0] = 0xE50C0008,
+	.sdram_cfg[1] = 0x00401010,
+	.sdram_cfg[2] = 0x1,
+	.timing_cfg[0] = 0xFA550018,
+	.timing_cfg[1] = 0xBAB40C52,
+	.timing_cfg[2] = 0x0048C11C,
+	.timing_cfg[3] = 0x01111000,
+	.timing_cfg[4] = 0x00000002,
+	.timing_cfg[5] = 0x03401400,
+	.timing_cfg[6] = 0x0,
+	.timing_cfg[7] = 0x23300000,
+	.timing_cfg[8] = 0x02116600,
+	.timing_cfg[9] = 0x0,
+	.dq_map[0] = 0x0,
+	.dq_map[1] = 0x0,
+	.dq_map[2] = 0x0,
+	.dq_map[3] = 0x0,
+	.sdram_mode[0] = 0x01010210,
+	.sdram_mode[1] = 0x0,
+	.sdram_mode[8] = 0x00000500,
+	.sdram_mode[9] = 0x04000000,
+	.interval = 0x18600618,
+	.zq_cntl = 0x8A090705,
+	.ddr_sr_cntr = 0x0,
+	.clk_cntl = 0x2000000,
+	.cdr[0] = 0x80040000,
+	.cdr[1] = 0xC1,
+	.wrlvl_cntl[0] = 0x86550607,
+	.wrlvl_cntl[1] = 0x07070708,
+	.wrlvl_cntl[2] = 0x0808088,
+};
+
+long long board_static_ddr(struct ddr_info *priv)
+{
+	memcpy(&priv->ddr_reg, &static_1600, sizeof(static_1600));
+
+	return 0x80000000ULL;
+}
+#else
+static const struct rc_timing rcz[] = {
+	{1300, 11, 5},
+	{1600, 5, 6},
+	{2100, 5, 6},
+	{}
+};
+
+static const struct board_timing ram[] = {
+	{0x1f, rcz, 0x00010103, 0x03040402},
+};
+
+int ddr_board_options(struct ddr_info *priv)
+{
+	int ret;
+	struct memctl_opt *popts = &priv->opt;
+
+	ret = cal_board_params(priv, ram, ARRAY_SIZE(ram));
+	if (ret)
+		return ret;
+
+	popts->bstopre = 0;
+	popts->ddr_cdr1 = DDR_CDR1_DHC_EN |
+				DDR_CDR1_ODT(DDR_CDR_ODT_60ohm);
+	popts->ddr_cdr2 = DDR_CDR2_ODT(DDR_CDR_ODT_60ohm) |
+				DDR_CDR2_VREF_TRAIN_EN;
+	popts->output_driver_impedance = 1;
+
+	return 0;
+}
+
+/* DDR model number:  MT40A512M16LY-075:E */
+struct dimm_params ddr_raw_timing = {
+	.n_ranks = 1,
+	.rank_density = 4294967296u,
+	.capacity = 4294967296u,
+	.primary_sdram_width = 64,
+	.ec_sdram_width = 8,
+	.rdimm = 0,
+	.mirrored_dimm = 0,
+	.n_row_addr = 16,
+	.n_col_addr = 10,
+	.bank_group_bits = 1,
+	.edc_config = 2,
+	.burst_lengths_bitmask = 0x0c,
+	.tckmin_x_ps = 750,
+	.tckmax_ps = 1900,
+	.caslat_x = 0x0001FFE00,
+	.taa_ps = 13500,
+	.trcd_ps = 13500,
+	.trp_ps = 13500,
+	.tras_ps = 33000,
+	.trc_ps = 46500,
+	.twr_ps = 15000,
+	.trfc1_ps = 350000,
+	.trfc2_ps = 260000,
+	.trfc4_ps = 160000,
+	.tfaw_ps = 30000,
+	.trrds_ps = 5300,
+	.trrdl_ps = 6400,
+	.tccdl_ps = 5355,
+	.refresh_rate_ps = 7800000,
+	.dq_mapping[0] = 0x0,
+	.dq_mapping[1] = 0x0,
+	.dq_mapping[2] = 0x0,
+	.dq_mapping[3] = 0x0,
+	.dq_mapping[4] = 0x0,
+	.dq_mapping_ors = 0,
+	.rc = 0x1f,
+};
+
+int ddr_get_ddr_params(struct dimm_params *pdimm,
+			    struct ddr_conf *conf)
+{
+	static const char dimm_model[] = "Fixed DDR on board";
+
+	conf->dimm_in_use[0] = 1;
+	memcpy(pdimm, &ddr_raw_timing, sizeof(struct dimm_params));
+	memcpy(pdimm->mpart, dimm_model, sizeof(dimm_model) - 1);
+
+	return 1;
+}
+#endif
+
+long long _init_ddr(void)
+{
+	int spd_addr[] = { NXP_SPD_EEPROM0 };
+	struct ddr_info info;
+	struct sysinfo sys;
+	long long dram_size;
+
+	zeromem(&sys, sizeof(sys));
+	get_clocks(&sys);
+	debug("platform clock %lu\n", sys.freq_platform);
+	debug("DDR PLL1 %lu\n", sys.freq_ddr_pll0);
+	debug("DDR PLL2 %lu\n", sys.freq_ddr_pll1);
+
+	zeromem(&info, sizeof(struct ddr_info));
+	info.num_ctlrs = 1;
+	info.dimm_on_ctlr = 1;
+	info.clk = get_ddr_freq(&sys, 0);
+	info.spd_addr = spd_addr;
+	info.ddr[0] = (void *)NXP_DDR_ADDR;
+
+	dram_size = dram_init(&info);
+
+	if (dram_size < 0)
+		ERROR("DDR init failed.\n");
+
+	erratum_a008850_post();
+
+	return dram_size;
+}
diff --git a/plat/nxp/soc-ls1046/ls1046adb/platform.mk b/plat/nxp/soc-ls1046/ls1046adb/platform.mk
new file mode 100644
index 000000000..a524005d1
--- /dev/null
+++ b/plat/nxp/soc-ls1046/ls1046adb/platform.mk
@@ -0,0 +1,16 @@
+#
+# Copyright 2020 NXP
+#
+# SPDX-License-Identifier: BSD-3-Clause
+#
+# Author Pankit Garg <pankit.garg@nxp.com>
+
+# board-specific build parameters
+BOOT_MODE	:= qspi
+BOARD		:= adb
+
+ # get SoC common build parameters
+include plat/nxp/soc-ls1046/soc.mk
+
+BL2_SOURCES	+=	${BOARD_PATH}/ddr_init.c
+
diff --git a/plat/nxp/soc-ls1046/ls1046adb/platform_def.h b/plat/nxp/soc-ls1046/ls1046adb/platform_def.h
new file mode 100644
index 000000000..a28247809
--- /dev/null
+++ b/plat/nxp/soc-ls1046/ls1046adb/platform_def.h
@@ -0,0 +1,212 @@
+/*
+ * Copyright 2020 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ * Authors: Pankit Garg <pankit.garg@nxp.com>
+ */
+
+#ifndef __PLATFORM_DEF_H__
+#define __PLATFORM_DEF_H__
+
+#include <arch.h>
+/* Certain ARM files require defines from this file */
+#include <tbbr_img_def.h>
+/* From ARM :-> Has some common defines ARM requires */
+#include <common_def.h>
+/* Soc specific defines */
+#include <soc.h>
+/* include the platform-level security policy */
+#include <policy.h>
+
+#include <gic_common.h>
+
+/* Special value used to verify platform parameters from BL2 to BL31 */
+
+/* TBD -- Check and get back if this value is same for all platforms */
+#define LS_BL31_PLAT_PARAM_VAL		0x0f1e2d3c4b5a6978ULL
+
+/******************************************************************************
+ *  Board specific defines
+ *****************************************************************************/
+
+#define NXP_SYSCLK_FREQ		100000000
+#define NXP_DDRCLK_FREQ		100000000
+
+/* UART related definition */
+#define NXP_CONSOLE_ADDR	NXP_UART_ADDR
+#define NXP_CONSOLE_BAUDRATE	115200
+
+/* Need to define SPD address irrespective of whether
+ * SPD is there or not on board, as this address is
+ * assign to some variable in board ddr .c file
+ */
+#define NXP_SPD_EEPROM0         0x57
+
+#define CONFIG_DDR_NODIMM
+
+#define DDRC_NUM_DIMM		1
+#define DDRC_NUM_CS		1
+#define CONFIG_DDR_ECC_EN
+
+#define PLAT_DEF_DRAM0_SIZE	0x80000000	/*  2G */
+
+/* Board specific - size of QSPI Flash on board */
+#if QSPI_BOOT
+#define NXP_QSPI_FLASH_SIZE	0x20000000
+#endif
+
+/* TBD Put all memory specific defines here */
+
+/******************************************************************************
+ * Required platform porting definitions common to all ARM standard platforms
+ *****************************************************************************/
+
+/* Size of cacheable stacks */
+#if defined(IMAGE_BL2)
+#define PLATFORM_STACK_SIZE	0x1000
+#elif defined(IMAGE_BL31)
+#define PLATFORM_STACK_SIZE	0x1000
+#endif
+
+#define FIRMWARE_WELCOME_STR_LS_BL2	"Welcome to LS1046ADB BL2 Phase\n"
+#define FIRMWARE_WELCOME_STR_LS_BL31	"Welcome to LS1046ADB BL31 Phase\n"
+
+/* This is common for all platforms where
+ * 64K is reserved for Secure memory
+ */
+/* 64M Secure Memory */
+#define NXP_SECURE_DRAM_SIZE	(64 * 1024 * 1024)
+
+/* 2M Secure EL1 Payload Shared Memory */
+#define NXP_SP_SHRD_DRAM_SIZE	(2 * 1024 * 1024)
+
+/* Check DRAM1 code at run time that it is 2 GB at run time */
+/* TBD -- add memory map in a porting guide  README */
+/* Non secure memory */
+#define NXP_NS_DRAM_SIZE	(NXP_DRAM0_SIZE - \
+				(NXP_SECURE_DRAM_SIZE + NXP_SP_SHRD_DRAM_SIZE))
+
+#define NXP_NS_DRAM_ADDR	NXP_DRAM0_ADDR
+
+#ifdef TEST_BL31
+#define NXP_SECURE_DRAM_ADDR 0
+#else
+#define NXP_SECURE_DRAM_ADDR	(NXP_NS_DRAM_ADDR + NXP_DRAM0_SIZE - \
+				(NXP_SECURE_DRAM_SIZE  + NXP_SP_SHRD_DRAM_SIZE))
+#endif
+
+#define NXP_SP_SHRD_DRAM_ADDR	(NXP_NS_DRAM_ADDR + NXP_DRAM0_SIZE \
+				- NXP_SP_SHRD_DRAM_SIZE)
+
+#define BL2_BASE		NXP_OCRAM_ADDR
+#define BL2_LIMIT		(NXP_OCRAM_ADDR + NXP_OCRAM_SIZE)
+#define BL2_TEXT_LIMIT		(BL2_LIMIT - NXP_ROM_RSVD - CSF_HDR_SZ)
+
+/* 2 MB reserved in secure memory for DDR */
+#define BL31_BASE		NXP_SECURE_DRAM_ADDR
+#define BL31_SIZE		(0x200000)
+#define BL31_LIMIT		(BL31_BASE + BL31_SIZE)
+
+/* TBD -- Add a 64K scratch region here between BL31 and BL32 */
+/* Put BL32 in secure memory */
+#define BL32_BASE		(NXP_SECURE_DRAM_ADDR + BL31_SIZE)
+#define BL32_LIMIT		(NXP_SECURE_DRAM_ADDR + \
+				NXP_SECURE_DRAM_SIZE + NXP_SP_SHRD_DRAM_SIZE)
+
+/* BL33 memory region */
+/* Hardcoded based on current address in u-boot */
+#define BL33_BASE		0x82000000
+#define BL33_LIMIT		(NXP_NS_DRAM_ADDR + NXP_NS_DRAM_SIZE)
+
+/* SD block buffer */
+#define NXP_SD_BLOCK_BUF_ADDR	ULL(0x80000000)
+#define NXP_SD_BLOCK_BUF_SIZE	0x00100000
+
+/*
+ * ID of the secure physical generic timer interrupt used by the BL32.
+ */
+#define BL32_IRQ_SEC_PHY_TIMER	29
+
+
+/* IO defines as needed by IO driver framework */
+/* TBD Add how to reach these numbers */
+#define MAX_IO_DEVICES		3
+#define MAX_IO_BLOCK_DEVICES	1
+#define MAX_IO_HANDLES		4
+
+/*
+ * FIP image defines - Offset at which FIP Image would be present
+ * Image would include Bl31 , Bl33 and Bl32 (optional)
+ */
+#ifdef POLICY_FUSE_PROVISION
+#define MAX_FIP_DEVICES		2
+#define FUSE_BUF		ULL(0x81000000)
+#define FUSE_SZ			0x80000
+#endif
+
+#define PLAT_FIP_OFFSET		0x100000
+#define PLAT_FIP_MAX_SIZE	0x400000
+
+/* Check if this size can be determined from array size */
+#if defined(IMAGE_BL2)
+#define MAX_MMAP_REGIONS	8
+#define MAX_XLAT_TABLES		6
+#elif defined(IMAGE_BL31)
+#define MAX_MMAP_REGIONS	9
+#define MAX_XLAT_TABLES		9
+#elif defined(IMAGE_BL32)
+#define MAX_MMAP_REGIONS	8
+#define MAX_XLAT_TABLES		9
+#endif
+
+/******************************************************************************/
+// GIC Related defines
+/******************************************************************************/
+/* TBD -- MACROS below are for GIC Init , picked them as it is from Jiafei
+ * needs cleanup by Rod
+ */
+
+/*
+ * The number of regions like RO(code), coherent and data required by
+ * different BL stages which need to be mapped in the MMU.
+ */
+#define ARM_IRQ_SEC_SGI_0		8
+#define ARM_IRQ_SEC_SGI_1		9
+#define ARM_IRQ_SEC_SGI_2		10
+#define ARM_IRQ_SEC_SGI_3		11
+#define ARM_IRQ_SEC_SGI_4		12
+#define ARM_IRQ_SEC_SGI_5		13
+#define ARM_IRQ_SEC_SGI_6		14
+#define ARM_IRQ_SEC_SGI_7		15
+
+/*
+ * Define properties of Group 1 Secure and Group 0 interrupts as per GICv3
+ * terminology. On a GICv2 system or mode, the lists will be merged and treated
+ * as Group 0 interrupts.
+ */
+#define PLAT_LS_G1S_IRQ_PROPS(grp) \
+	INTR_PROP_DESC(BL32_IRQ_SEC_PHY_TIMER, GIC_HIGHEST_SEC_PRIORITY, grp, \
+			GIC_INTR_CFG_LEVEL), \
+	INTR_PROP_DESC(ARM_IRQ_SEC_SGI_0, GIC_HIGHEST_SEC_PRIORITY, grp, \
+			GIC_INTR_CFG_EDGE), \
+	INTR_PROP_DESC(ARM_IRQ_SEC_SGI_1, GIC_HIGHEST_SEC_PRIORITY, grp, \
+			GIC_INTR_CFG_EDGE), \
+	INTR_PROP_DESC(ARM_IRQ_SEC_SGI_2, GIC_HIGHEST_SEC_PRIORITY, grp, \
+			GIC_INTR_CFG_EDGE), \
+	INTR_PROP_DESC(ARM_IRQ_SEC_SGI_3, GIC_HIGHEST_SEC_PRIORITY, grp, \
+			GIC_INTR_CFG_EDGE), \
+	INTR_PROP_DESC(ARM_IRQ_SEC_SGI_4, GIC_HIGHEST_SEC_PRIORITY, grp, \
+			GIC_INTR_CFG_EDGE), \
+	INTR_PROP_DESC(ARM_IRQ_SEC_SGI_5, GIC_HIGHEST_SEC_PRIORITY, grp, \
+			GIC_INTR_CFG_EDGE), \
+	INTR_PROP_DESC(ARM_IRQ_SEC_SGI_6, GIC_HIGHEST_SEC_PRIORITY, grp, \
+			GIC_INTR_CFG_EDGE), \
+	INTR_PROP_DESC(ARM_IRQ_SEC_SGI_7, GIC_HIGHEST_SEC_PRIORITY, grp, \
+			GIC_INTR_CFG_EDGE)
+
+#define PLAT_LS_G0_IRQ_PROPS(grp)
+
+/******************************************************************************/
+
+#endif /* __PLATFORM_DEF_H__ */
diff --git a/plat/nxp/soc-ls1046/ls1046adb/policy.h b/plat/nxp/soc-ls1046/ls1046adb/policy.h
new file mode 100644
index 000000000..1dc4047f0
--- /dev/null
+++ b/plat/nxp/soc-ls1046/ls1046adb/policy.h
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2020 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ * Author Pankit Garg <pankit.garg@nxp.com>
+ */
+
+/*---------------------------------------------------------------------------*/
+
+#ifndef _POLICY_H
+#define	_POLICY_H
+
+ // the following defines affect the PLATFORM SECURITY POLICY
+
+ // set this to 0x0 if the platform is not using/responding to ECC errors
+ // set this to 0x1 if ECC is being used (we have to do some init)
+#define  POLICY_USING_ECC 0x0
+
+ // Set this to 0x0 to leave the default SMMU page size in sACR
+ // Set this to 0x1 to change the SMMU page size to 64K
+#define POLICY_SMMU_PAGESZ_64K 0x1
+
+//-----------------------------------------------------------------------------
+
+#endif // _POLICY_H
-- 
2.17.1

